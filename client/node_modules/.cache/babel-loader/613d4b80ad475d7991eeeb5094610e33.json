{"ast":null,"code":"var _jsxFileName = \"/Users/jorgebarreiros/Desktop/gocontact-challenge/client/src/components/SearchBar.js\";\nimport React from 'react';\nimport \"./SearchBar.css\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      suggestions: {},\n      selectedCities: []\n    };\n    this.updateInput = this.updateInput.bind(this);\n    this.addCity = this.addCity.bind(this);\n    this.removeCity = this.removeCity.bind(this);\n  }\n\n  updateInput(event) {\n    let val = event.target.value;\n    this.setState({\n      inputValue: val\n    });\n    setTimeout(() => {\n      this.getSuggestions();\n    }, 500);\n  }\n\n  getSuggestions() {\n    let city = this.state.inputValue;\n    fetch(`http://localhost:2000/suggestions/${city}`).then(res => res.text()).then(res => {\n      let response = JSON.parse(res);\n      this.setState({\n        suggestions: response\n      });\n    }).catch(err => {\n      this.setState({\n        suggestions: []\n      });\n    });\n  }\n\n  addCity(event) {\n    console.warn(event);\n    let city = event.target.innerText;\n    this.setState(prevState => ({\n      selectedCities: [...prevState.selectedCities, city],\n      inputValue: \"\",\n      suggestions: []\n    }));\n  }\n\n  removeCity(event) {\n    let city = event.target.innerText;\n    const index = array.indexOf(city);\n\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n\n    this.setState(prevState => ({\n      selectedCities: [...prevState.selectedCities, city]\n    }));\n    this.setState({\n      people: this.state.people.filter(function (person) {\n        return person !== e.target.value;\n      })\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchInputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: this.props.placeholder,\n          onChange: this.updateInput,\n          value: this.state.inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"searchIcon\",\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SuggestionsList, {\n        suggestions: this.state.suggestions,\n        handleClick: this.addCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SelectedCities, {\n        cities: this.state.selectedCities,\n        removeCity: this.removeCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction SuggestionsList(props) {\n  if (Object.keys(props.suggestions).length == 0) {\n    return null;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataResult\",\n      children: props.suggestions.map(value => {\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"dataItem\",\n          onClick: props.handleClick,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", value.LocalizedName, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"country\",\n            children: [\" \", value.Country.LocalizedName, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, value.Key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_c = SuggestionsList;\n\nfunction SelectedCities(props) {\n  if (props.cities.length == 0) {\n    return null;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"citiesPoolContainer\",\n      children: props.cities.map(city => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cityContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cityName\",\n            children: city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n            className: \"cross\",\n            onClick: props.removeCity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, city, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_c2 = SelectedCities;\nexport default SearchBar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SuggestionsList\");\n$RefreshReg$(_c2, \"SelectedCities\");","map":{"version":3,"sources":["/Users/jorgebarreiros/Desktop/gocontact-challenge/client/src/components/SearchBar.js"],"names":["React","SearchIcon","CloseIcon","SearchBar","Component","constructor","props","state","inputValue","suggestions","selectedCities","updateInput","bind","addCity","removeCity","event","val","target","value","setState","setTimeout","getSuggestions","city","fetch","then","res","text","response","JSON","parse","catch","err","console","warn","innerText","prevState","index","array","indexOf","splice","people","filter","person","e","render","placeholder","SuggestionsList","Object","keys","length","map","handleClick","LocalizedName","Country","Key","SelectedCities","cities"],"mappings":"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","sourcesContent":["import React from 'react'\nimport \"./SearchBar.css\"\nimport SearchIcon from '@material-ui/icons/Search'\nimport CloseIcon from '@material-ui/icons/Close';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            inputValue: \"\",\n            suggestions: {},\n            selectedCities: []\n        }\n        this.updateInput = this.updateInput.bind(this)\n        this.addCity = this.addCity.bind(this)\n        this.removeCity = this.removeCity.bind(this)\n    }\n    updateInput(event){\n        let val = event.target.value\n        this.setState({\n            inputValue: val\n        })\n        setTimeout(() => {\n            this.getSuggestions()\n        }, 500)\n    }  \n    getSuggestions() {\n        let city = this.state.inputValue\n        fetch(`http://localhost:2000/suggestions/${city}`).\n            then( res => res.text() ).\n            then( res => { \n                let response = JSON.parse(res)\n                this.setState({ suggestions: response })\n            }).catch(err => { this.setState({ suggestions: [] }) })\n    }\n    addCity(event) {\n        console.warn(event)\n        let city = event.target.innerText\n        this.setState( prevState => ({\n            selectedCities: [...prevState.selectedCities, city],\n            inputValue: \"\",\n            suggestions: []\n        }))\n    }\n    removeCity(event) {\n        let city = event.target.innerText\n        const index = array.indexOf(city);\n        if (index > -1) {\n            array.splice(index, 1);\n        }\n        this.setState( prevState => ({\n            selectedCities: [...prevState.selectedCities, city]\n        }))\n\n        this.setState({\n            people: this.state.people.filter(\n                function(person) { \n                    return person !== e.target.value \n                })\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"search\">\n                <div className=\"searchInputs\">\n                    <input\n                        type=\"text\"\n                        placeholder={ this.props.placeholder }                    \n                        onChange={ this.updateInput }\n                        value={ this.state.inputValue }\n                    />\n                    <div className=\"searchIcon\">\n                        <SearchIcon/>\n                    </div>\n                </div>\n                <SuggestionsList suggestions={this.state.suggestions} handleClick={this.addCity}/>\n                <SelectedCities cities={this.state.selectedCities} removeCity={this.removeCity}/>\n            </div>\n        )\n    }\n}\n\nfunction SuggestionsList(props) {\n    if (Object.keys(props.suggestions).length == 0) {\n        return null\n    } else {\n        return (\n            <div className=\"dataResult\">\n                {props.suggestions.map((value) => {\n                    return (\n                        <a className=\"dataItem\" key={value.Key} onClick={props.handleClick}>\n                            <p> {value.LocalizedName} </p>\n                            <p className=\"country\"> {value.Country.LocalizedName} </p>\n                        </a>\n                    )\n                })}\n            </div>\n        )\n    }\n}\nfunction SelectedCities(props) {\n    if(props.cities.length == 0) {\n        return null\n    } else {\n        return (\n            <div className=\"citiesPoolContainer\">\n                {props.cities.map((city) => {\n                    return (\n                        <div className=\"cityContainer\" key={city}>\n                            <div className=\"cityName\">{city}</div>\n                            <CloseIcon className=\"cross\" onClick={props.removeCity}/>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\nexport default SearchBar"]},"metadata":{},"sourceType":"module"}